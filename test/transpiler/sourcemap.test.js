import { expect, it, describe } from "bun:test";
import { writeFileSync, mkdirSync } from "node:fs";
import { tmpdir } from "node:os";
import { join } from "path";
import { bunEnv, bunExe } from "harness";

function matchSource(source, line_onebased, column_onebased) {
  let line_zerobased = line_onebased - 1;
  let column_zerobased = column_onebased - 1;
  let lines = source.split(/\n/g);
  let line = lines[line_zerobased];
  let pre = line.slice(0, column_zerobased);
  let post = line.slice(column_zerobased);

  return { pre, post };
}

async function test(source, preRegExp, postRegExp = new RegExp("")) {
  const dir = tmpdir();
  writeFileSync(join(dir, "index.js"), source, "utf-8");
  const { stdout, stderr, exitCode } = Bun.spawnSync({
    cmd: [bunExe(), "run", join(dir, "index.js")],
    stdout: "pipe",
    stderr: "pipe",
  });
  const stdoutString = [...stdout].map(x => String.fromCharCode(x)).join("");
  const stderrString = [...stderr].map(x => String.fromCharCode(x)).join("");
  console.log(stdoutString);
  console.log(stderrString);
  const m = (stdoutString + stderrString).match(/:([0-9]+):([0-9]+)/);
  expect(m).toBeTruthy();
  if (m) {
    const line_onebased = parseInt(m[1]);
    const column_onebased = parseInt(m[2]);
    const { pre, post } = matchSource(source, line_onebased, column_onebased);
    console.log({ pre, post });
    expect(post).toMatch(preRegExp);
  }
}

describe("source maps", async () => {
  describe("console.trace", async () => {
    it("gets line/column numbers right", async () => {
      const sources = [
        `// autogenerated
function f()
{
  console.trace("foo");
}

f()
`,
        `// autogenerated
f()
function f()
{
  console.trace("foo");
}
`,
        `// autogenerated
f()
function g(dummy)
{
  return dummy;
}
function f()
{
  console.trace("foo");
}
`,
      ];
      for (const source of sources) {
        await test(source, /^console\.trace/);
      }
    });
  });
  describe("assert", async () => {
    it("gets line/column numbers right", async () => {
      const sources = [
        `// autogenerated
import assert from "assert";

function f()
{
  assert(0);
}

f()
`,
        `// autogenerated
import assert from "assert";

f()

function f()
{
  assert(0);
}
`,
        `// autogenerated
function f()
{
  assert(0);
}

import assert from "assert";

f()
`,
        `// autogenerated
import assert from "assert";

function f()
{
  assert(0);
}

import assert2 from "assert";

f()
`,
      ];
      for (const source of sources) {
        await test(source, /^0/);
      }
    });
  });
});
