name: bun-linux-x64

on:
  push:
    branches:
      - everything
      - bisect
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  linux:
    name: ${{matrix.tag}}
    runs-on: ${{matrix.runner}}
    timeout-minutes: 90
    permissions: write-all
    strategy:
      fail-fast: false
      matrix:
        include:
          # - cpu: haswell
          #   tag: linux-x64
          #   arch: x86_64
          #   build_arch: amd64
          #   runner: ubuntu-latest
          #   build_machine_arch: x86_64
          #   assertions: "OFF"
          #   zig_optimize: "ReleaseFast"
          #   target: "artifact"
          # - cpu: nehalem
          #   tag: linux-x64-baseline
          #   arch: x86_64
          #   build_arch: amd64
          #   runner: big-ubuntu
          #   build_machine_arch: x86_64
          #   assertions: "OFF"
          #   zig_optimize: "ReleaseFast"
          #   target: "artifact"
          - cpu: haswell
            tag: linux-x64-assertions
            arch: x86_64
            build_arch: amd64
            runner: ubuntu-latest
            build_machine_arch: x86_64
            assertions: "ON"
            zig_optimize: "Debug"
            target: "artifact-assertions"
          # - cpu: nehalem
          #   tag: linux-x64-baseline-assertions
          #   arch: x86_64
          #   build_arch: amd64
          #   runner: big-ubuntu
          #   build_machine_arch: x86_64
          #   assertions: "ON"
          #   zig_optimize: "ReleaseSafe"
          #   target: "artifact-assertions"

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          ref: ${{github.sha}}
          clean: true
      - name: check the date
        run: |
          for i in $(seq 0 23); do echo "T_MINUS_$i=$(date -d "$i hours ago" --iso=h)" >> $GITHUB_ENV; done
      - name: check the date
        run: |
          for i in $(seq 0 7); do echo "T_MINUS_${i}_DAYS=$(date -d "00:00 $i days ago" --iso=h)" >> $GITHUB_ENV; done
      - name: cache
        uses: actions/cache@v4
        with:
          path: /tmp/cache
          key: ${{env.T_MINUS_0}}
          restore-keys: |
            ${{env.T_MINUS_1}}
            ${{env.T_MINUS_2}}
            ${{env.T_MINUS_3}}
            ${{env.T_MINUS_4}}
            ${{env.T_MINUS_5}}
            ${{env.T_MINUS_0_DAYS}}
            ${{env.T_MINUS_1_DAYS}}
            ${{env.T_MINUS_2_DAYS}}
            ${{env.T_MINUS_3_DAYS}}
      - name: install ccache
        run: |
          sudo apt-get install ccache
          mkdir -p /tmp/cache/ccache
          cp -a /tmp/cache cache
      - uses: docker/setup-buildx-action@v2
        id: buildx
        with:
          install: true
      - name: Run
        run: |
          rm -rf ${{runner.temp}}/release
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - run: |
          mkdir -p /tmp/.buildx-cache-${{matrix.tag}}
          mkdir -p /tmp/cache/ccache
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: false
          build-args: |
            ARCH=${{matrix.arch}}
            BUILDARCH=${{matrix.build_arch}}
            BUILD_MACHINE_ARCH=${{matrix.build_machine_arch}}
            CPU_TARGET=${{matrix.cpu}}
            GIT_SHA=${{github.sha}}
            ASSERTIONS=${{matrix.assertions}}
            ZIG_OPTIMIZE=${{matrix.zig_optimize}}
          platforms: linux/${{matrix.build_arch}}
          target: ${{matrix.target}}
          outputs: type=local,dest=${{runner.temp}}/release
      - id: bun-version-check
        name: Bun version check
        run: |
          # If this hangs, it means something is seriously wrong with the build
          ${{runner.temp}}/release/bun --version
      - id: cache-shuffle
        name: shuffle around the cache data
        run: |
          cd /tmp && sudo tar xf ${{runner.temp}}/release/cache.tar
      - name: Zip
        run: |
          # if zip is not found
          if [ ! -x "$(command -v zip)" ]; then
            sudo apt-get update && sudo apt-get install -y zip --no-install-recommends
          fi

          if [ ! -x "$(command -v strip)" ]; then
            sudo apt-get update && sudo apt-get install -y binutils --no-install-recommends
          fi

          cd ${{runner.temp}}/release
          chmod +x bun

          mkdir bun-${{matrix.tag}}

          mv bun bun-${{matrix.tag}}/bun

          zip -r bun-${{matrix.tag}}.zip bun-${{matrix.tag}}
      - uses: actions/upload-artifact@v3
        with:
          name: bun-${{matrix.tag}}
          path: ${{runner.temp}}/release/bun-${{matrix.tag}}.zip
      - uses: actions/upload-artifact@v3
        with:
          name: bun-obj-${{matrix.tag}}
          path: ${{runner.temp}}/release/bun-obj
      - uses: actions/upload-artifact@v3
        with:
          name: ${{matrix.tag}}-dependencies
          path: ${{runner.temp}}/release/bun-dependencies
      - uses: actions/upload-artifact@v3
        with:
          name: ${{matrix.tag}}-cache
          path: ${{runner.temp}}/release/cache.tar
#       - name: Release
#         id: release
#         uses: ncipollo/release-action@v1
#         if: |
#           github.repository_owner == 'oven-sh'
#           && github.ref == 'refs/heads/main'
#         with:
#           prerelease: true
#           body: "This canary release of Bun corresponds to the commit [${{ github.sha }}]"
#           allowUpdates: true
#           replacesArtifacts: true
#           generateReleaseNotes: true
#           artifactErrorsFailBuild: true
#           token: ${{ secrets.GITHUB_TOKEN }}
#           name: "Canary (${{github.sha}})"
#           tag: "canary"
#           artifacts: "${{runner.temp}}/release/bun-${{matrix.tag}}.zip,${{runner.temp}}/release/bun-${{matrix.tag}}-profile.zip"
#       - uses: sarisia/actions-status-discord@v1
#         if: failure() && github.repository_owner == 'oven-sh' && github.event_name == 'pull_request'
#         with:
#           title: ""
#           webhook: ${{ secrets.DISCORD_WEBHOOK }}
#           status: ${{ job.status }}
#           noprefix: true
#           nocontext: true
#           description: |
#             Pull Request
#             ### [${{github.event.pull_request.title}}](https://github.com/oven-sh/bun/pull/${{github.event.number}})
#
#             @${{ github.actor }}
#
#             Build failed on ${{ matrix.tag }}:
#
#             **[View build output](https://github.com/oven-sh/bun/actions/runs/${{github.run_id}})**
#
#             [Commit ${{github.sha}}](https://github.com/oven-sh/bun/commits/${{github.sha}})
  linux-test:
    name: Tests ${{matrix.tag}}
    runs-on: ubuntu-latest
    needs: [linux]
    timeout-minutes: 90
    permissions:
      pull-requests: write
    outputs:
      failing_tests: ${{ steps.test.outputs.failing_tests }}
      failing_tests_count: ${{ steps.test.outputs.failing_tests_count }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # - tag: linux-x64
          # - tag: linux-x64-baseline
          - tag: linux-x64-assertions
          # - tag: linux-x64-baseline-assertions
    steps:
      - id: checkout
        name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: false
          clean: true
      - id: download
        name: Download
        uses: actions/download-artifact@v3
        with:
          name: bun-${{matrix.tag}}
          path: ${{runner.temp}}/release
      - id: install-bun
        name: Install Bun
        run: |
          cd ${{runner.temp}}/release
          unzip bun-${{matrix.tag}}.zip
          cd bun-${{matrix.tag}}
          chmod +x bun
          pwd >> $GITHUB_PATH
      - id: bun-version-check
        name: Bun version check
        run: |
          # If this hangs, it means something is seriously wrong with the build
          bun --version
      - id: install-dependnecies
        name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y openssl
          bun install --verbose
          bun install --cwd=test --verbose
          bun install --cwd=packages/bun-internal-test --verbose

          bun install --cwd=test/js/third_party/prisma --verbose

      # This is disabled because the cores are ~5.5gb each
      # so it is easy to hit 50gb coredump downloads. Only enable if you need to retrive one

      # - name: Set core dumps to get stored in /cores
      #   run: |
      #     sudo mkdir /cores
      #     sudo chmod 777 /cores
      #     # Core filenames will be of the form executable.pid.timestamp:
      #     sudo bash -c 'echo "/cores/%e.%p.%t" > /proc/sys/kernel/core_pattern'

      - id: pretest
        name: Pretest
        run: |
          node --version
      - id: test2
        name: Test (node runner)
        run: |
          ls -l packages/bun-internal-test/src/runner.node.mjs
      - id: test
        name: Test (node runner)
        run: |
          node packages/bun-internal-test/src/runner.node.mjs
      - uses: actions/upload-artifact@v3
        if: steps.test.outputs.failing_tests != ''
        with:
          name: cores
          path: /cores
 #      - uses: sarisia/actions-status-discord@v1
 #        if: always() && steps.test.outputs.failing_tests != '' && github.event_name == 'pull_request'
 #        with:
 #          title: ""
 #          webhook: ${{ secrets.DISCORD_WEBHOOK }}
 #          status: "failure"
 #          noprefix: true
 #          nocontext: true
 #          description: |
 #            Pull Request
 #            ### ‚ùå [${{github.event.pull_request.title}}](https://github.com/oven-sh/bun/pull/${{github.event.number}})
 #
 #            @${{ github.actor }}, there are ${{ steps.test.outputs.failing_tests_count }} files with test failures on ${{ matrix.tag }}:
 #
 #            ${{ steps.test.outputs.failing_tests }}
 #
 #            **[View test output](https://github.com/oven-sh/bun/actions/runs/${{github.run_id}})**
      - name: Comment on PR
        if: steps.test.outputs.failing_tests != '' && github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v2
        with:
          comment_tag: test-failures-${{matrix.tag}}
          message: |
            ‚ùå @${{ github.actor }} ${{ steps.test.outputs.failing_tests_count }} files with test failures on ${{ matrix.tag }}:

            ${{ steps.test.outputs.failing_tests }}

            **[View test output](https://github.com/oven-sh/bun/actions/runs/${{github.run_id}})**

            <sup>[#${{github.sha}}](https://github.com/oven-sh/bun/commits/${{github.sha}})</sup>
      - name: Uncomment on PR
        if: steps.test.outputs.failing_tests == '' && github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v2
        with:
          comment_tag: test-failures-${{matrix.tag}}
          mode: upsert
          create_if_not_exists: false
          message: |
            ‚úÖ test failures on ${{ matrix.tag }} have been resolved.

            <sup>[#${{github.sha}}](https://github.com/oven-sh/bun/commits/${{github.sha}})</sup>
      - id: fail
        name: Fail the build
        if: steps.test.outputs.failing_tests != ''
        run: exit 1
